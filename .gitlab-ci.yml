stages:
  - install_helm
  - subscribe
  - deploy
  - cleanup
  

# Install a second deployment of both open5gs and ueransim in a new namespace. This will serve as the environment for the load test. By having two installations, this will give insights on how network functions respond when they face network traffic vs no network traffic.


install_apps_in_new_namespace:
  image:
    name: alpine/helm
    entrypoint: [""]
  stage: install_helm
  variables:
    REGION: us-east-1
    CLUSTER_NAME: cntf-open5gs-cluster
  environment:
    name: open5gs_cluster 
  script:
    - apk add --no-cache python3 py3-pip 
    - pip3 install --upgrade pip 
    - pip3 install --no-cache-dir awscli
    - aws --version
    - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    - chmod +x kubectl
    - mv kubectl /usr/local/bin/
    - aws eks update-kubeconfig --region $REGION --name $CLUSTER_NAME
    - kubectl apply -f cntf_tests_namespace.yaml
    - helm repo add openverso https://gradiant.github.io/openverso-charts/
    - helm upgrade --install cntf-open5gs openverso/open5gs --namespace openverso --values https://raw.githubusercontent.com/DISHDevEx/napp/main/napp/open5gs_values/5gSA_ues_values.yaml
    - helm upgrade --install cntf-ueransim-gnb openverso/ueransim-gnb --namespace openverso --values https://raw.githubusercontent.com/DISHDevEx/napp/main/napp/open5gs_values/gnb_ues_values.yaml


ue_populate_random:
  allow_failure: true
  stage: subscribe
  image: ubuntu:latest
  variables:
    REGION: us-east-1
    CLUSTER_NAME: cntf-open5gs-cluster
  environment: 
    name: open5gs_cluster
  before_script:
    - apt-get update && apt-get install -y curl unzip
    - apt-get install -y bash
    - bash --version
    - apt-get install -y python3 python3-pip jq
    - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    - unzip awscliv2.zip
    - ./aws/install
    - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    - chmod +x kubectl
    - mv kubectl /usr/local/bin/
    - aws eks update-kubeconfig --name $CLUSTER_NAME --region $REGION
    - POPULATE_POD=$(kubectl -n openverso get pod --output=jsonpath={.items..metadata.name} -l app.kubernetes.io/component=populate)
    - curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
    - chmod +x get_helm.sh
    - ./get_helm.sh
    - chmod +x load_test.sh
  script: 
    - helm repo add openverso https://gradiant.github.io/openverso-charts/
    # - sleep 120 # this command will allow all the network functions to finish getting set up before executing the below script
    - kubectl -n openverso cp ./load_test.sh $POPULATE_POD:/tmp/load_test.sh
    - kubectl -n openverso exec $POPULATE_POD -- bash -c "/tmp/load_test.sh >&1"

   
cleanup:
  image:
    name: alpine/helm
    entrypoint: [""]
  variables:
    REGION: us-east-1
    CLUSTER_NAME: cntf-open5gs-cluster
  stage: cleanup
  when: manual
  environment:
    name: open5gs_cluster
  script:
    - apk add --no-cache python3 py3-pip
    - pip3 install --upgrade pip
    - pip3 install --no-cache-dir awscli
    - aws --version
    - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    - chmod +x kubectl
    - mv kubectl /usr/local/bin/
    - aws eks update-kubeconfig --region $REGION --name $CLUSTER_NAME
    - helm repo add openverso https://gradiant.github.io/openverso-charts/
    - POPULATE_POD=$(kubectl -n openverso get pod --output=jsonpath={.items..metadata.name} -l app.kubernetes.io/component=populate)  # change namespace to cntf-tests
    - kubectl -n openverso exec $POPULATE_POD -- open5gs-dbctl reset   # change namespace to cntf-tests
    # - helm uninstall cntf-open5gs --namespace cntf-tests
    # - helm uninstall cntf-ueransim-gnb --namespace cntf-tests        # uncomment this section if another app installment is functional
    # - kubectl delete namespace cntf-tests

 
    
