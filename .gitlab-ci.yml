#Job that populates a random IMSI ID into the database

stages:
  - subscribe
  - deploy
  - cleanup


ue_populate_10k_random:
  allow_failure: true
  stage: subscribe
  image: ubuntu:latest
  variables:
    REGION: us-east-1
    CLUSTER_NAME: cntf-open5gs-cluster
  environment: 
    name: open5gs_cluster
  artifacts:
    paths:
      - IMSI_IDs.txt  # Changed artifact name to indicate multiple IDs
  before_script:
    # Install dependencies and connect to cluster
    - apt update
    - apt install -y python3
    - python3 --version # above three steps install python 
    - apt-get install -y python3-pip
    - apt-get install -y python3 python3-pip
    - pip3 install requests
    - pip3 install --upgrade pip
    - apt-get update && apt-get install -y curl unzip
    - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    - unzip awscliv2.zip
    - ./aws/install
    - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    - chmod +x kubectl
    - mv kubectl /usr/local/bin/
    - aws eks update-kubeconfig --name $CLUSTER_NAME --region $REGION
    - POPULATE_POD=$(kubectl -n openverso get pod --output=jsonpath={.items..metadata.name} -l app.kubernetes.io/component=populate)
  script: 
    - python3 populate.py

deploy_10k_test_ues:
  image:
    name: alpine/helm
    entrypoint: [""]
  stage: deploy
  needs:
    - job: ue_populate_10k_random
      artifacts: true
  variables:
    REGION: us-east-1
    CLUSTER_NAME: cntf-open5gs-cluster
  environment:
    name: open5gs_cluster
  script:
    - apk add --no-cache python3 py3-pip jq
    - pip3 install --upgrade pip
    - pip3 install --no-cache-dir awscli
    - aws --version
    - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    - chmod +x kubectl
    - mv kubectl /usr/local/bin/
    - aws eks update-kubeconfig --region $REGION --name $CLUSTER_NAME
    - helm repo add openverso https://gradiant.github.io/openverso-charts/

    # Loop over each IMSI_ID
    - |
      while IFS= read -r IMSI_ID; do
        COMMON_LABEL=$(jq -n --arg CI_PIPELINE_ID "$CI_PIPELINE_ID" '{"gitlab-pipeline": $CI_PIPELINE_ID}')
        helm template -n openverso ueransim-ues-smoke-test openverso/ueransim-ues \
          --set ues.initialMSISDN="${IMSI_ID}" \
          --set-json commonLabels="${COMMON_LABEL}" \
          --values https://raw.githubusercontent.com/DISHDevEx/napp/main/napp/open5gs_values/gnb_ues_values.yaml | kubectl apply -f -

        helm -n openverso upgrade --install ueransim-ues-smoke-test openverso/ueransim-ues \
          --set ues.initialMSISDN="${IMSI_ID}" \
          --set-json commonLabels="${COMMON_LABEL}" \
          --values https://raw.githubusercontent.com/DISHDevEx/napp/main/napp/open5gs_values/gnb_ues_values.yaml
      done < IMSI_IDs.txt  # Use the file containing the generated IMSI IDs


# Job that removes subscriber created in previous job

cleanup:
  image:
    name: alpine/helm
    entrypoint: [""]
  variables:
    REGION: us-east-1
    CLUSTER_NAME: cntf-open5gs-cluster
  needs:
    - job: ue_populate_10k_random
      artifacts: true
  stage: cleanup
  when: manual
  environment:
    name: open5gs_cluster
  script:
    - apk add --no-cache python3 py3-pip
    - pip3 install --upgrade pip
    - pip3 install --no-cache-dir awscli
    - aws --version
    - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    - chmod +x kubectl
    - mv kubectl /usr/local/bin/
    - aws eks update-kubeconfig --region $REGION --name $CLUSTER_NAME
    - helm repo add openverso https://gradiant.github.io/openverso-charts/

    # Uninstall Helm release for each UE subscription
    - |
      while IFS= read -r IMSI_ID; do
        release_name="ueransim-ues-smoke-test-$IMSI_ID"  # Modify release name as needed
        helm -n openverso uninstall "$release_name"
      done < IMSI_IDs.txt
    # ... (the rest of the script)
  

 
    
